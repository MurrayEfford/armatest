// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// popcpp
NumericMatrix popcpp(const NumericMatrix& mask, NumericVector& prob, double& maskspacing, int& N);
RcppExport SEXP _ipsecr_popcpp(SEXP maskSEXP, SEXP probSEXP, SEXP maskspacingSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< double& >::type maskspacing(maskspacingSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(popcpp(mask, prob, maskspacing, N));
    return rcpp_result_gen;
END_RCPP
}
// popevencpp
NumericMatrix popevencpp(const NumericMatrix& bounds, int& N);
RcppExport SEXP _ipsecr_popevencpp(SEXP boundsSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type bounds(boundsSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(popevencpp(bounds, N));
    return rcpp_result_gen;
END_RCPP
}
// CHcpp
List CHcpp(const NumericMatrix& animals, const NumericMatrix& traps, const NumericMatrix& Tsk, int detectfn, int detect, const NumericVector& gsb, const int btype, const int Markov, const IntegerVector& binomN);
RcppExport SEXP _ipsecr_CHcpp(SEXP animalsSEXP, SEXP trapsSEXP, SEXP TskSEXP, SEXP detectfnSEXP, SEXP detectSEXP, SEXP gsbSEXP, SEXP btypeSEXP, SEXP MarkovSEXP, SEXP binomNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type animals(animalsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< int >::type detectfn(detectfnSEXP);
    Rcpp::traits::input_parameter< int >::type detect(detectSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gsb(gsbSEXP);
    Rcpp::traits::input_parameter< const int >::type btype(btypeSEXP);
    Rcpp::traits::input_parameter< const int >::type Markov(MarkovSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    rcpp_result_gen = Rcpp::wrap(CHcpp(animals, traps, Tsk, detectfn, detect, gsb, btype, Markov, binomN));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ipsecr_popcpp", (DL_FUNC) &_ipsecr_popcpp, 4},
    {"_ipsecr_popevencpp", (DL_FUNC) &_ipsecr_popevencpp, 2},
    {"_ipsecr_CHcpp", (DL_FUNC) &_ipsecr_CHcpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_ipsecr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
